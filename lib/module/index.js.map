{"version":3,"sources":["index.ts"],"names":["MobeyeGeolocation","DEFAULT_CONFIGURATION","NativeEventEmitter","useEffect","useState","start","revertTemporaryConfiguration","_configuration","configure","configuration","setTemporaryConfiguration","getLastLocations","n","then","result","locations","JSON","parse","checkIOSAuthorization","checkPermission","requestIOSAuthorization","askForPermission","locationEmitter","useLocation","location","setLocation","latitude","longitude","accuracy","Number","MAX_SAFE_INTEGER","time","res","subscription","addListener","success","payload","remove"],"mappings":";;;;;;AAAA;;;;;;;;AAQA,OAAOA,iBAAP,MAA8B,gBAA9B;AACA,OAAOC,qBAAP,MAAkC,wBAAlC;AAEA,SAASC,kBAAT,QAAqD,cAArD;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA;;AACA,MAAM;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAA0CN,iBAAhD;AAEA;;AACA,MAAMO,cAAqC,GAAGN,qBAA9C;AAEA,OAAO,SAASO,SAAT,CAAmBC,aAAnB,EAAyE;AAC5ET,EAAAA,iBAAiB,CAACQ,SAAlB,iCACOD,cADP,GAEOE,aAFP;AAIH;AAED,OAAO,SAASC,yBAAT,CAAmCD,aAAnC,EAAyF;AAC5FT,EAAAA,iBAAiB,CAACU,yBAAlB,iCACOH,cADP,GAEOE,aAFP;AAIH;AAED;;;;;AAIA,OAAO,SAASE,gBAAT,CAA0BC,CAA1B,EAA0D;AAC7D,SAAOZ,iBAAiB,CAACW,gBAAlB,CAAmCC,CAAnC,EAAsCC,IAAtC,CAA4CC,MAAD,IAAY;AAC1D,UAAMC,SAAqB,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAX,CAA9B;AACA,WAAOC,SAAP;AACH,GAHM,CAAP;AAIH;AAED;;;;;AAIA,OAAO,SAASG,qBAAT,GAAmD;AACtD,SAAOlB,iBAAiB,CAACmB,eAAlB,EAAP;AACH;AAED;;;;;AAIA,OAAO,SAASC,uBAAT,GAA8D;AACjE,SAAOpB,iBAAiB,CAACqB,gBAAlB,EAAP;AACH;AAED;;AACA,OAAO,MAAMC,eAAe,GAAG,IAAIpB,kBAAJ,CAAuBF,iBAAvB,CAAxB;AAEP;;;;AAGA,OAAO,SAASuB,WAAT,GAAiC;AAEpC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAW;AAC/CsB,IAAAA,QAAQ,EAAE,CAAC,CADoC;AAE/CC,IAAAA,SAAS,EAAE,CAAC,CAFmC;AAG/CC,IAAAA,QAAQ,EAAEC,MAAM,CAACC,gBAH8B;AAI/CC,IAAAA,IAAI,EAAE;AAJyC,GAAX,CAAxC;AAOA5B,EAAAA,SAAS,CAAC,MAAM;AACZ;AAEAQ,IAAAA,gBAAgB,CAAC,CAAD,CAAhB,CAAoBE,IAApB,CAA0BmB,GAAD,IAASP,WAAW,CAACO,GAAG,CAAC,CAAD,CAAJ,CAA7C;AAEA;;AACA,UAAMC,YAAY,GAAGX,eAAe,CAACY,WAAhB,CAA4B,kBAA5B,EAAiDpB,MAAD,IAA2B;AAC5F,UAAIA,MAAM,CAACqB,OAAX,EAAoB;AAChBV,QAAAA,WAAW,CAACX,MAAM,CAACsB,OAAR,CAAX;AACH;AACJ,KAJoB,CAArB;AAKA,WAAO,MAAMH,YAAY,CAACI,MAAb,EAAb;AACH,GAZQ,EAYN,EAZM,CAAT;AAcA,SAAOb,QAAP;AACH;AAED,eAAe;AACXhB,EAAAA,SADW;AAEXH,EAAAA,KAFW;AAGXK,EAAAA,yBAHW;AAIXJ,EAAAA,4BAJW;AAKXgB,EAAAA,eALW;AAMXX,EAAAA,gBANW;AAOXO,EAAAA,qBAPW;AAQXE,EAAAA;AARW,CAAf","sourcesContent":["/**\n * Copyright (c) Mobeye.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\nimport MobeyeGeolocation from './nativeModule';\nimport DEFAULT_CONFIGURATION from './defaultConfiguration';\nimport { Location, LocationConfiguration, LocationEvent } from './types';\nimport { NativeEventEmitter, PermissionStatus } from 'react-native';\nimport { useEffect, useState } from 'react';\n\n/* get native module */\nconst { start, revertTemporaryConfiguration } = MobeyeGeolocation;\n\n/* init default configuration */\nconst _configuration: LocationConfiguration = DEFAULT_CONFIGURATION;\n\nexport function configure(configuration?: Partial<LocationConfiguration>): void {\n    MobeyeGeolocation.configure({\n        ..._configuration,\n        ...configuration\n    });\n}\n\nexport function setTemporaryConfiguration(configuration?: Partial<LocationConfiguration>): void {\n    MobeyeGeolocation.setTemporaryConfiguration({\n        ..._configuration,\n        ...configuration\n    });\n}\n\n/**\n * Get last `n` last locations computed by the service.\n * @param n last computed locations\n */\nexport function getLastLocations(n: number): Promise<[Location]> {\n    return MobeyeGeolocation.getLastLocations(n).then((result) => {\n        const locations: [Location] = JSON.parse(result);\n        return locations;\n    });\n}\n\n/**\n * Check location authorization for iOS.\n * To check for android just use AndroidPermissions\n */\nexport function checkIOSAuthorization(): Promise<boolean> {\n    return MobeyeGeolocation.checkPermission();\n}\n\n/**\n * Request location authorization for iOS.\n * To request for android just use AndroidPermissions\n */\nexport function requestIOSAuthorization(): Promise<PermissionStatus> {\n    return MobeyeGeolocation.askForPermission();\n}\n\n/* Native event emitter to catch geolocations event */\nexport const locationEmitter = new NativeEventEmitter(MobeyeGeolocation);\n\n/**\n * A React Hook which updates when the location significantly changes.\n */\nexport function useLocation(): Location {\n\n    const [location, setLocation] = useState<Location>({\n        latitude: -1,\n        longitude: -1,\n        accuracy: Number.MAX_SAFE_INTEGER,\n        time: 0,\n    });\n\n    useEffect(() => {\n        /* get last known use position */\n\n        getLastLocations(1).then((res) => setLocation(res[0]));\n\n        /* subscribe to the listener */\n        const subscription = locationEmitter.addListener('LOCATION_UPDATED', (result: LocationEvent) => {\n            if (result.success) {\n                setLocation(result.payload);\n            }\n        });\n        return () => subscription.remove();\n    }, []);\n\n    return location;\n}\n\nexport default {\n    configure,\n    start,\n    setTemporaryConfiguration,\n    revertTemporaryConfiguration,\n    locationEmitter,\n    getLastLocations,\n    checkIOSAuthorization,\n    requestIOSAuthorization,\n};\n"]}